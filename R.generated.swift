//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PostTableViewCell`.
    static let postTableViewCell: Rswift.ReuseIdentifier<PostTableViewCell> = Rswift.ReuseIdentifier(identifier: "PostTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `AddPost`.
    static let addPost = _R.storyboard.addPost()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `PostDetails`.
    static let postDetails = _R.storyboard.postDetails()
    /// Storyboard `Posts`.
    static let posts = _R.storyboard.posts()
    
    /// `UIStoryboard(name: "AddPost", bundle: ...)`
    static func addPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addPost)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "PostDetails", bundle: ...)`
    static func postDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.postDetails)
    }
    
    /// `UIStoryboard(name: "Posts", bundle: ...)`
    static func posts(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.posts)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// en translation: Body
      /// 
      /// Locales: en, ar
      static let body = Rswift.StringResource(key: "Body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, ar
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en, ar
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Post added succssfully
      /// 
      /// Locales: en, ar
      static let postAddedSuccssfully = Rswift.StringResource(key: "Post added succssfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Post edited succssfully
      /// 
      /// Locales: en, ar
      static let postEditedSuccssfully = Rswift.StringResource(key: "Post edited succssfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Posts
      /// 
      /// Locales: en, ar
      static let posts = Rswift.StringResource(key: "Posts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, ar
      static let success = Rswift.StringResource(key: "Success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Title
      /// 
      /// Locales: en, ar
      static let title = Rswift.StringResource(key: "Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      
      /// en translation: Body
      /// 
      /// Locales: en, ar
      static func body(_: Void = ()) -> String {
        return NSLocalizedString("Body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, ar
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en, ar
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Post added succssfully
      /// 
      /// Locales: en, ar
      static func postAddedSuccssfully(_: Void = ()) -> String {
        return NSLocalizedString("Post added succssfully", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Post edited succssfully
      /// 
      /// Locales: en, ar
      static func postEditedSuccssfully(_: Void = ()) -> String {
        return NSLocalizedString("Post edited succssfully", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Posts
      /// 
      /// Locales: en, ar
      static func posts(_: Void = ()) -> String {
        return NSLocalizedString("Posts", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, ar
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("Success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Title
      /// 
      /// Locales: en, ar
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("Title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.posts` struct is generated, and contains static references to 2 localization keys.
    struct posts {
      /// ar translation: Post Title
      /// 
      /// Locales: ar
      static let kxqAh67LText = Rswift.StringResource(key: "Kxq-ah-67L.text", tableName: "Posts", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Posts
      /// 
      /// Locales: ar
      static let g2BNNT3oTitle = Rswift.StringResource(key: "g2B-nN-t3o.title", tableName: "Posts", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      
      /// ar translation: Post Title
      /// 
      /// Locales: ar
      static func kxqAh67LText(_: Void = ()) -> String {
        return NSLocalizedString("Kxq-ah-67L.text", tableName: "Posts", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Posts
      /// 
      /// Locales: ar
      static func g2BNNT3oTitle(_: Void = ()) -> String {
        return NSLocalizedString("g2B-nN-t3o.title", tableName: "Posts", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try addPost.validate()
      try launchScreen.validate()
      try postDetails.validate()
      try posts.validate()
    }
    
    struct addPost: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addPostViewController = StoryboardViewControllerResource<AddPostViewController>(identifier: "AddPostViewController")
      let bundle = R.hostingBundle
      let name = "AddPost"
      
      func addPostViewController(_: Void = ()) -> AddPostViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPostViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.addPost().addPostViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPostViewController' could not be loaded from storyboard 'AddPost' as 'AddPostViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct postDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PostDetails"
      let postDetailsViewController = StoryboardViewControllerResource<PostDetailsViewController>(identifier: "PostDetailsViewController")
      
      func postDetailsViewController(_: Void = ()) -> PostDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postDetailsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.postDetails().postDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postDetailsViewController' could not be loaded from storyboard 'PostDetails' as 'PostDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct posts: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Posts"
      let postsViewController = StoryboardViewControllerResource<PostsViewController>(identifier: "PostsViewController")
      
      func postsViewController(_: Void = ()) -> PostsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.posts().postsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postsViewController' could not be loaded from storyboard 'Posts' as 'PostsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
